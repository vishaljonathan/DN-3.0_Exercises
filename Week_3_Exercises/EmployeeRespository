package com.example.employeemanagementsystem.repository;

import com.example.employeemanagementsystem.entity.Employee;
import com.example.employeemanagementsystem.dto.EmployeeDTO;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import com.example.employeemanagementsystem.projection.EmployeeNameEmailProjection;

import java.util.List;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long> {

    // Derived query method to find employees by department ID
    List<Employee> findByDepartmentId(Long departmentId);

    // Derived query method to find an employee by email
    Employee findByEmail(String email);

     // Find all employees by department name
     List<Employee> findByDepartmentName(String departmentName);

     // Find employees whose name starts with a specific string
     List<Employee> findByNameStartingWith(String prefix);
 
     // Find employees with an email containing a specific domain
     List<Employee> findByEmailContaining(String domain);
 
     // Find employees by department name and sort them by name
     List<Employee> findByDepartmentNameOrderByNameAsc(String departmentName);

     // Custom query to find employees by department ID
    @Query("SELECT e FROM Employee e WHERE e.department.id = :departmentId")
    List<Employee> findByDepartmentId(@Param("departmentId") Long departmentId);

    // Custom query to find employees with email matching a specific pattern
    @Query("SELECT e FROM Employee e WHERE e.email LIKE %:emailDomain%")
    List<Employee> findByEmailDomain(@Param("emailDomain") String emailDomain);

    // Using named query to find employees by department name
    List<Employee> findByDepartmentNameNamed(@Param("departmentName") String departmentName);

    // Using named query to find employees by email domain
    List<Employee> findByEmailDomainNamed(@Param("emailDomain") String emailDomain);
    
    // Paginated query to find all employees
    Page<Employee> findAll(Pageable pageable);

    // Paginated query to find employees by department name
    Page<Employee> findByDepartmentName(String departmentName, Pageable pageable);

    // Sorted query to find employees by department name
    List<Employee> findByDepartmentName(String departmentName, Sort sort);

    // Method to fetch only name and email using the projection
    List<EmployeeNameEmailProjection> findAllBy();

    // Method to fetch only name and email using a class-based projection
    @Query("SELECT new com.example.employeemanagementsystem.dto.EmployeeDTO(e.name, e.email) FROM Employee e")
    List<EmployeeDTO> findEmployeeNameAndEmail();
}




