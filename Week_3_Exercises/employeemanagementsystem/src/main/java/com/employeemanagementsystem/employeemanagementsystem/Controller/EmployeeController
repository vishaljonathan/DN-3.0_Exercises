package com.example.employeemanagementsystem.controller;

import com.example.employeemanagementsystem.entity.Employee;
import com.example.employeemanagementsystem.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import com.example.employeemanagementsystem.dto.EmployeeDTO;
import com.example.employeemanagementsystem.projection.EmployeeNameEmailProjection;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

@RestController
@RequestMapping("/api/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    @GetMapping("/{id}")
    public ResponseEntity<Employee> getEmployeeById(@PathVariable Long id) {
        return employeeService.getEmployeeById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public Employee createEmployee(@RequestBody Employee employee) {
        return employeeService.createEmployee(employee);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Employee> updateEmployee(@PathVariable Long id, @RequestBody Employee employeeDetails) {
        return ResponseEntity.ok(employeeService.updateEmployee(id, employeeDetails));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public Page<Employee> getAllEmployees(Pageable pageable) {
        return employeeService.getAllEmployees(pageable);
    }

    @GetMapping("/by-department")
    public Page<Employee> getEmployeesByDepartment(@RequestParam String departmentName, Pageable pageable) {
        return employeeService.getEmployeesByDepartmentName(departmentName, pageable);
    }

    @GetMapping("/sorted-by-department")
    public List<Employee> getSortedEmployeesByDepartment(@RequestParam String departmentName, Sort sort) {
        return employeeService.getEmployeesByDepartmentName(departmentName, sort);
    }

    @GetMapping("/paged-and-sorted")
    public Page<Employee> getPagedAndSortedEmployees(Pageable pageable) {
    return employeeService.getAllEmployees(pageable);
    }

    @GetMapping("/projections")
    public List<EmployeeNameEmailProjection> getEmployeeProjections() {
        return employeeService.getEmployeeNamesAndEmails();
    }

    @GetMapping("/dtos")
    public List<EmployeeDTO> getEmployeeDTOs() {
        return employeeService.getEmployeeDTOs();
    }
}
